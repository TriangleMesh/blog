<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Q</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Q</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Sep 2024 15:05:14 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Registers and Common Operations in MIPS Assembly</title>
      <link>http://localhost:1313/posts/2024/09/30/understanding-registers-and-common-operations-in-mips-assembly/</link>
      <pubDate>Mon, 30 Sep 2024 15:05:14 -0700</pubDate>
      <guid>http://localhost:1313/posts/2024/09/30/understanding-registers-and-common-operations-in-mips-assembly/</guid>
      <description>1. Types of Registers in MIPS Assembly MIPS provides 32 general-purpose registers that are divided into different categories based on their use.&#xA;1.1 Temporary Registers ($t0 - $t9) Purpose: $t0 to $t9 are temporary registers used to store temporary data. Their values do not need to be preserved across function calls, meaning they may be overwritten during the execution of a function.&#xA;Use case:&#xA;• Short-term computation results: Used to store intermediate results or temporary variables.</description>
    </item>
    <item>
      <title>Ways to Customize Sorting in PriorityQueue</title>
      <link>http://localhost:1313/posts/2024/09/29/ways-to-customize-sorting-in-priorityqueue/</link>
      <pubDate>Sun, 29 Sep 2024 16:24:31 -0700</pubDate>
      <guid>http://localhost:1313/posts/2024/09/29/ways-to-customize-sorting-in-priorityqueue/</guid>
      <description>By default, Java&amp;rsquo;s PriorityQueue uses natural ordering, but we can customize the sorting rules in several ways. This article will introduce three common methods and analyze possible errors and their solutions.&#xA;1. Implementing the Comparable Interface Allow the object to implement the Comparable interface and override the compareTo() method to define the natural sorting order of the object. This is suitable for cases where a &amp;ldquo;natural order&amp;rdquo; exists.&#xA;class Student implements Comparable&amp;lt;Student&amp;gt; { private int age; public Student(int age) { this.</description>
    </item>
    <item>
      <title>MIPS Instruction Set and Machine Code Generation</title>
      <link>http://localhost:1313/posts/2024/09/29/mips-instruction-set-and-machine-code-generation/</link>
      <pubDate>Sun, 29 Sep 2024 16:07:04 -0700</pubDate>
      <guid>http://localhost:1313/posts/2024/09/29/mips-instruction-set-and-machine-code-generation/</guid>
      <description>Overview of the MIPS Instruction Set The MIPS instruction set consists of 32-bit fixed-length instructions, divided into several types, each with a specific field format.&#xA;Main Instruction Types: R-type Instructions: Used for operations between registers.&#xA;opcode | rs | rt | rd | shamt | funct I-type Instructions: Used for operations between registers and immediate values or for memory access.&#xA;opcode | rs | rt | immediate J-type Instructions: Used for jump operations.</description>
    </item>
    <item>
      <title>How to Build a Blog with Hugo and Github</title>
      <link>http://localhost:1313/posts/2024/07/26/how-to-build-a-blog-with-hugo-and-github/</link>
      <pubDate>Fri, 26 Jul 2024 19:47:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/2024/07/26/how-to-build-a-blog-with-hugo-and-github/</guid>
      <description>Why I Use Hugo Easy to get started: Hugo offers a large number of pre-made templates, requiring little to no front-end knowledge, allowing for a quick setup of website. Fast page loading speed: Compared to Hexo, which I used previously, Hugo generates pages significantly faster. This is because Hugo uses precompiled templates and minimal rendering and is written in Go which offers extremely high compilation speed and performance optimization. Beautiful templates: Hugo’s templates are generally less flashy than Hexo’s.</description>
    </item>
    <item>
      <title>Git Submodule Simplified Tutorial</title>
      <link>http://localhost:1313/posts/2024/07/26/git-submodule-simplified-tutorial/</link>
      <pubDate>Fri, 26 Jul 2024 00:54:14 +0800</pubDate>
      <guid>http://localhost:1313/posts/2024/07/26/git-submodule-simplified-tutorial/</guid>
      <description>For clarity, we will refer to the local main module as the main module, the main module&amp;rsquo;s GitHub repository as the main repository, the local submodule as the submodule, and the submodule&amp;rsquo;s GitHub repository as the sub-repository.&#xA;Adding Submodules and Sub-repositories Clone the main repository to your local machine: git clone &amp;lt;main_repo_url&amp;gt; Add the submodule within the main module: git submodule add &amp;lt;submodule_url&amp;gt; &amp;lt;submodule_repo_name&amp;gt; If the submodule is successfully added, you will see a submodule folder inside the main module&amp;rsquo;s directory and a .</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description> </description>
    </item>
  </channel>
</rss>
